package com.wamogu.biz.sys.service;

import cn.hutool.core.util.ReflectUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.wamogu.biz.sys.convert.SysConfigCastor;
import com.wamogu.biz.sys.pojo.ISetting;
import com.wamogu.biz.sys.pojo.SysConfigDto;
import com.wamogu.biz.sys.pojo.SysConfigVo;
import com.wamogu.dao.repository.SysConfigRepository;
import com.wamogu.entity.sys.SysConfig;
import com.wamogu.kit.BaseBizService;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * generated by FwUtilCodegen
 * @since 2024-06-05
 */
@Getter
@Service
@RequiredArgsConstructor
public final class SysConfigBizService extends BaseBizService<SysConfig, SysConfigDto, SysConfigVo, Integer> {
    private final SysConfigCastor baseCastor;

    private final SysConfigRepository baseRepository;

    public <T extends ISetting> T getSetting(Class<T> clazz) {
        T dto = ReflectUtil.newInstance(clazz);
        List<SysConfig> list = this.getBaseRepository().lambdaQuery()
                .in(SysConfig::getKey, dto.fieldNames())
                .list();
        dto.fromSysConfigs(list);
        return dto;
    }

    public <T extends ISetting> T setSetting(T dto) {
        dto.toSysConfigs().forEach(x -> {
            LambdaQueryWrapper<SysConfig> wrapper = new LambdaQueryWrapper<SysConfig>().eq(SysConfig::getKey, x.getKey());
            boolean r = this.getBaseRepository().update(x, wrapper);
            if (!r) {
                this.getBaseRepository().save(x);
            }
        });
        return dto;
    }
}
